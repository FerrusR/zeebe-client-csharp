// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gateway.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GatewayProtocol {

  /// <summary>Holder for reflection information generated from gateway.proto</summary>
  public static partial class GatewayReflection {

    #region Descriptor
    /// <summary>File descriptor for gateway.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GatewayReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1nYXRld2F5LnByb3RvEhBnYXRld2F5X3Byb3RvY29sIo4BChNBY3RpdmF0",
            "ZUpvYnNSZXF1ZXN0EgwKBHR5cGUYASABKAkSDgoGd29ya2VyGAIgASgJEg8K",
            "B3RpbWVvdXQYAyABKAMSGQoRbWF4Sm9ic1RvQWN0aXZhdGUYBCABKAUSFQoN",
            "ZmV0Y2hWYXJpYWJsZRgFIAMoCRIWCg5yZXF1ZXN0VGltZW91dBgGIAEoAyJE",
            "ChRBY3RpdmF0ZUpvYnNSZXNwb25zZRIsCgRqb2JzGAEgAygLMh4uZ2F0ZXdh",
            "eV9wcm90b2NvbC5BY3RpdmF0ZWRKb2IioQIKDEFjdGl2YXRlZEpvYhILCgNr",
            "ZXkYASABKAMSDAoEdHlwZRgCIAEoCRIbChN3b3JrZmxvd0luc3RhbmNlS2V5",
            "GAMgASgDEhUKDWJwbW5Qcm9jZXNzSWQYBCABKAkSIQoZd29ya2Zsb3dEZWZp",
            "bml0aW9uVmVyc2lvbhgFIAEoBRITCgt3b3JrZmxvd0tleRgGIAEoAxIRCgll",
            "bGVtZW50SWQYByABKAkSGgoSZWxlbWVudEluc3RhbmNlS2V5GAggASgDEhUK",
            "DWN1c3RvbUhlYWRlcnMYCSABKAkSDgoGd29ya2VyGAogASgJEg8KB3JldHJp",
            "ZXMYCyABKAUSEAoIZGVhZGxpbmUYDCABKAMSEQoJdmFyaWFibGVzGA0gASgJ",
            "IjwKHUNhbmNlbFdvcmtmbG93SW5zdGFuY2VSZXF1ZXN0EhsKE3dvcmtmbG93",
            "SW5zdGFuY2VLZXkYASABKAMiIAoeQ2FuY2VsV29ya2Zsb3dJbnN0YW5jZVJl",
            "c3BvbnNlIjcKEkNvbXBsZXRlSm9iUmVxdWVzdBIOCgZqb2JLZXkYASABKAMS",
            "EQoJdmFyaWFibGVzGAIgASgJIhUKE0NvbXBsZXRlSm9iUmVzcG9uc2Uibwod",
            "Q3JlYXRlV29ya2Zsb3dJbnN0YW5jZVJlcXVlc3QSEwoLd29ya2Zsb3dLZXkY",
            "ASABKAMSFQoNYnBtblByb2Nlc3NJZBgCIAEoCRIPCgd2ZXJzaW9uGAMgASgF",
            "EhEKCXZhcmlhYmxlcxgEIAEoCSJ6Ch5DcmVhdGVXb3JrZmxvd0luc3RhbmNl",
            "UmVzcG9uc2USEwoLd29ya2Zsb3dLZXkYASABKAMSFQoNYnBtblByb2Nlc3NJ",
            "ZBgCIAEoCRIPCgd2ZXJzaW9uGAMgASgFEhsKE3dvcmtmbG93SW5zdGFuY2VL",
            "ZXkYBCABKAMimwEKJ0NyZWF0ZVdvcmtmbG93SW5zdGFuY2VXaXRoUmVzdWx0",
            "UmVxdWVzdBJACgdyZXF1ZXN0GAEgASgLMi8uZ2F0ZXdheV9wcm90b2NvbC5D",
            "cmVhdGVXb3JrZmxvd0luc3RhbmNlUmVxdWVzdBIWCg5yZXF1ZXN0VGltZW91",
            "dBgCIAEoAxIWCg5mZXRjaFZhcmlhYmxlcxgDIAMoCSKXAQooQ3JlYXRlV29y",
            "a2Zsb3dJbnN0YW5jZVdpdGhSZXN1bHRSZXNwb25zZRITCgt3b3JrZmxvd0tl",
            "eRgBIAEoAxIVCg1icG1uUHJvY2Vzc0lkGAIgASgJEg8KB3ZlcnNpb24YAyAB",
            "KAUSGwoTd29ya2Zsb3dJbnN0YW5jZUtleRgEIAEoAxIRCgl2YXJpYWJsZXMY",
            "BSABKAkiUwoVRGVwbG95V29ya2Zsb3dSZXF1ZXN0EjoKCXdvcmtmbG93cxgB",
            "IAMoCzInLmdhdGV3YXlfcHJvdG9jb2wuV29ya2Zsb3dSZXF1ZXN0T2JqZWN0",
            "IqsBChVXb3JrZmxvd1JlcXVlc3RPYmplY3QSDAoEbmFtZRgBIAEoCRJCCgR0",
            "eXBlGAIgASgOMjQuZ2F0ZXdheV9wcm90b2NvbC5Xb3JrZmxvd1JlcXVlc3RP",
            "YmplY3QuUmVzb3VyY2VUeXBlEhIKCmRlZmluaXRpb24YAyABKAwiLAoMUmVz",
            "b3VyY2VUeXBlEggKBEZJTEUQABIICgRCUE1OEAESCAoEWUFNTBACIlwKFkRl",
            "cGxveVdvcmtmbG93UmVzcG9uc2USCwoDa2V5GAEgASgDEjUKCXdvcmtmbG93",
            "cxgCIAMoCzIiLmdhdGV3YXlfcHJvdG9jb2wuV29ya2Zsb3dNZXRhZGF0YSJl",
            "ChBXb3JrZmxvd01ldGFkYXRhEhUKDWJwbW5Qcm9jZXNzSWQYASABKAkSDwoH",
            "dmVyc2lvbhgCIAEoBRITCgt3b3JrZmxvd0tleRgDIAEoAxIUCgxyZXNvdXJj",
            "ZU5hbWUYBCABKAkiRwoORmFpbEpvYlJlcXVlc3QSDgoGam9iS2V5GAEgASgD",
            "Eg8KB3JldHJpZXMYAiABKAUSFAoMZXJyb3JNZXNzYWdlGAMgASgJIhEKD0Zh",
            "aWxKb2JSZXNwb25zZSJMChFUaHJvd0Vycm9yUmVxdWVzdBIOCgZqb2JLZXkY",
            "ASABKAMSEQoJZXJyb3JDb2RlGAIgASgJEhQKDGVycm9yTWVzc2FnZRgDIAEo",
            "CSIUChJUaHJvd0Vycm9yUmVzcG9uc2UidwoVUHVibGlzaE1lc3NhZ2VSZXF1",
            "ZXN0EgwKBG5hbWUYASABKAkSFgoOY29ycmVsYXRpb25LZXkYAiABKAkSEgoK",
            "dGltZVRvTGl2ZRgDIAEoAxIRCgltZXNzYWdlSWQYBCABKAkSEQoJdmFyaWFi",
            "bGVzGAUgASgJIhgKFlB1Ymxpc2hNZXNzYWdlUmVzcG9uc2UiLQoWUmVzb2x2",
            "ZUluY2lkZW50UmVxdWVzdBITCgtpbmNpZGVudEtleRgBIAEoAyIZChdSZXNv",
            "bHZlSW5jaWRlbnRSZXNwb25zZSIRCg9Ub3BvbG9neVJlcXVlc3QiigEKEFRv",
            "cG9sb2d5UmVzcG9uc2USLQoHYnJva2VycxgBIAMoCzIcLmdhdGV3YXlfcHJv",
            "dG9jb2wuQnJva2VySW5mbxITCgtjbHVzdGVyU2l6ZRgCIAEoBRIXCg9wYXJ0",
            "aXRpb25zQ291bnQYAyABKAUSGQoRcmVwbGljYXRpb25GYWN0b3IYBCABKAUi",
            "aQoKQnJva2VySW5mbxIOCgZub2RlSWQYASABKAUSDAoEaG9zdBgCIAEoCRIM",
            "CgRwb3J0GAMgASgFEi8KCnBhcnRpdGlvbnMYBCADKAsyGy5nYXRld2F5X3By",
            "b3RvY29sLlBhcnRpdGlvbiKQAQoJUGFydGl0aW9uEhMKC3BhcnRpdGlvbklk",
            "GAEgASgFEj0KBHJvbGUYAiABKA4yLy5nYXRld2F5X3Byb3RvY29sLlBhcnRp",
            "dGlvbi5QYXJ0aXRpb25Ccm9rZXJSb2xlIi8KE1BhcnRpdGlvbkJyb2tlclJv",
            "bGUSCgoGTEVBREVSEAASDAoIRk9MTE9XRVIQASI6ChdVcGRhdGVKb2JSZXRy",
            "aWVzUmVxdWVzdBIOCgZqb2JLZXkYASABKAMSDwoHcmV0cmllcxgCIAEoBSIa",
            "ChhVcGRhdGVKb2JSZXRyaWVzUmVzcG9uc2UiUwoTU2V0VmFyaWFibGVzUmVx",
            "dWVzdBIaChJlbGVtZW50SW5zdGFuY2VLZXkYASABKAMSEQoJdmFyaWFibGVz",
            "GAIgASgJEg0KBWxvY2FsGAMgASgIIiMKFFNldFZhcmlhYmxlc1Jlc3BvbnNl",
            "EgsKA2tleRgBIAEoAzLuCgoHR2F0ZXdheRJhCgxBY3RpdmF0ZUpvYnMSJS5n",
            "YXRld2F5X3Byb3RvY29sLkFjdGl2YXRlSm9ic1JlcXVlc3QaJi5nYXRld2F5",
            "X3Byb3RvY29sLkFjdGl2YXRlSm9ic1Jlc3BvbnNlIgAwARJ9ChZDYW5jZWxX",
            "b3JrZmxvd0luc3RhbmNlEi8uZ2F0ZXdheV9wcm90b2NvbC5DYW5jZWxXb3Jr",
            "Zmxvd0luc3RhbmNlUmVxdWVzdBowLmdhdGV3YXlfcHJvdG9jb2wuQ2FuY2Vs",
            "V29ya2Zsb3dJbnN0YW5jZVJlc3BvbnNlIgASXAoLQ29tcGxldGVKb2ISJC5n",
            "YXRld2F5X3Byb3RvY29sLkNvbXBsZXRlSm9iUmVxdWVzdBolLmdhdGV3YXlf",
            "cHJvdG9jb2wuQ29tcGxldGVKb2JSZXNwb25zZSIAEn0KFkNyZWF0ZVdvcmtm",
            "bG93SW5zdGFuY2USLy5nYXRld2F5X3Byb3RvY29sLkNyZWF0ZVdvcmtmbG93",
            "SW5zdGFuY2VSZXF1ZXN0GjAuZ2F0ZXdheV9wcm90b2NvbC5DcmVhdGVXb3Jr",
            "Zmxvd0luc3RhbmNlUmVzcG9uc2UiABKbAQogQ3JlYXRlV29ya2Zsb3dJbnN0",
            "YW5jZVdpdGhSZXN1bHQSOS5nYXRld2F5X3Byb3RvY29sLkNyZWF0ZVdvcmtm",
            "bG93SW5zdGFuY2VXaXRoUmVzdWx0UmVxdWVzdBo6LmdhdGV3YXlfcHJvdG9j",
            "b2wuQ3JlYXRlV29ya2Zsb3dJbnN0YW5jZVdpdGhSZXN1bHRSZXNwb25zZSIA",
            "EmUKDkRlcGxveVdvcmtmbG93EicuZ2F0ZXdheV9wcm90b2NvbC5EZXBsb3lX",
            "b3JrZmxvd1JlcXVlc3QaKC5nYXRld2F5X3Byb3RvY29sLkRlcGxveVdvcmtm",
            "bG93UmVzcG9uc2UiABJQCgdGYWlsSm9iEiAuZ2F0ZXdheV9wcm90b2NvbC5G",
            "YWlsSm9iUmVxdWVzdBohLmdhdGV3YXlfcHJvdG9jb2wuRmFpbEpvYlJlc3Bv",
            "bnNlIgASWQoKVGhyb3dFcnJvchIjLmdhdGV3YXlfcHJvdG9jb2wuVGhyb3dF",
            "cnJvclJlcXVlc3QaJC5nYXRld2F5X3Byb3RvY29sLlRocm93RXJyb3JSZXNw",
            "b25zZSIAEmUKDlB1Ymxpc2hNZXNzYWdlEicuZ2F0ZXdheV9wcm90b2NvbC5Q",
            "dWJsaXNoTWVzc2FnZVJlcXVlc3QaKC5nYXRld2F5X3Byb3RvY29sLlB1Ymxp",
            "c2hNZXNzYWdlUmVzcG9uc2UiABJoCg9SZXNvbHZlSW5jaWRlbnQSKC5nYXRl",
            "d2F5X3Byb3RvY29sLlJlc29sdmVJbmNpZGVudFJlcXVlc3QaKS5nYXRld2F5",
            "X3Byb3RvY29sLlJlc29sdmVJbmNpZGVudFJlc3BvbnNlIgASXwoMU2V0VmFy",
            "aWFibGVzEiUuZ2F0ZXdheV9wcm90b2NvbC5TZXRWYXJpYWJsZXNSZXF1ZXN0",
            "GiYuZ2F0ZXdheV9wcm90b2NvbC5TZXRWYXJpYWJsZXNSZXNwb25zZSIAElMK",
            "CFRvcG9sb2d5EiEuZ2F0ZXdheV9wcm90b2NvbC5Ub3BvbG9neVJlcXVlc3Qa",
            "Ii5nYXRld2F5X3Byb3RvY29sLlRvcG9sb2d5UmVzcG9uc2UiABJrChBVcGRh",
            "dGVKb2JSZXRyaWVzEikuZ2F0ZXdheV9wcm90b2NvbC5VcGRhdGVKb2JSZXRy",
            "aWVzUmVxdWVzdBoqLmdhdGV3YXlfcHJvdG9jb2wuVXBkYXRlSm9iUmV0cmll",
            "c1Jlc3BvbnNlIgBCIQoZaW8uemVlYmUuZ2F0ZXdheS5wcm90b2NvbFAAWgJw",
            "YmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.ActivateJobsRequest), global::GatewayProtocol.ActivateJobsRequest.Parser, new[]{ "Type", "Worker", "Timeout", "MaxJobsToActivate", "FetchVariable", "RequestTimeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.ActivateJobsResponse), global::GatewayProtocol.ActivateJobsResponse.Parser, new[]{ "Jobs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.ActivatedJob), global::GatewayProtocol.ActivatedJob.Parser, new[]{ "Key", "Type", "WorkflowInstanceKey", "BpmnProcessId", "WorkflowDefinitionVersion", "WorkflowKey", "ElementId", "ElementInstanceKey", "CustomHeaders", "Worker", "Retries", "Deadline", "Variables" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.CancelWorkflowInstanceRequest), global::GatewayProtocol.CancelWorkflowInstanceRequest.Parser, new[]{ "WorkflowInstanceKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.CancelWorkflowInstanceResponse), global::GatewayProtocol.CancelWorkflowInstanceResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.CompleteJobRequest), global::GatewayProtocol.CompleteJobRequest.Parser, new[]{ "JobKey", "Variables" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.CompleteJobResponse), global::GatewayProtocol.CompleteJobResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.CreateWorkflowInstanceRequest), global::GatewayProtocol.CreateWorkflowInstanceRequest.Parser, new[]{ "WorkflowKey", "BpmnProcessId", "Version", "Variables" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.CreateWorkflowInstanceResponse), global::GatewayProtocol.CreateWorkflowInstanceResponse.Parser, new[]{ "WorkflowKey", "BpmnProcessId", "Version", "WorkflowInstanceKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.CreateWorkflowInstanceWithResultRequest), global::GatewayProtocol.CreateWorkflowInstanceWithResultRequest.Parser, new[]{ "Request", "RequestTimeout", "FetchVariables" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.CreateWorkflowInstanceWithResultResponse), global::GatewayProtocol.CreateWorkflowInstanceWithResultResponse.Parser, new[]{ "WorkflowKey", "BpmnProcessId", "Version", "WorkflowInstanceKey", "Variables" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.DeployWorkflowRequest), global::GatewayProtocol.DeployWorkflowRequest.Parser, new[]{ "Workflows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.WorkflowRequestObject), global::GatewayProtocol.WorkflowRequestObject.Parser, new[]{ "Name", "Type", "Definition" }, null, new[]{ typeof(global::GatewayProtocol.WorkflowRequestObject.Types.ResourceType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.DeployWorkflowResponse), global::GatewayProtocol.DeployWorkflowResponse.Parser, new[]{ "Key", "Workflows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.WorkflowMetadata), global::GatewayProtocol.WorkflowMetadata.Parser, new[]{ "BpmnProcessId", "Version", "WorkflowKey", "ResourceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.FailJobRequest), global::GatewayProtocol.FailJobRequest.Parser, new[]{ "JobKey", "Retries", "ErrorMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.FailJobResponse), global::GatewayProtocol.FailJobResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.ThrowErrorRequest), global::GatewayProtocol.ThrowErrorRequest.Parser, new[]{ "JobKey", "ErrorCode", "ErrorMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.ThrowErrorResponse), global::GatewayProtocol.ThrowErrorResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.PublishMessageRequest), global::GatewayProtocol.PublishMessageRequest.Parser, new[]{ "Name", "CorrelationKey", "TimeToLive", "MessageId", "Variables" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.PublishMessageResponse), global::GatewayProtocol.PublishMessageResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.ResolveIncidentRequest), global::GatewayProtocol.ResolveIncidentRequest.Parser, new[]{ "IncidentKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.ResolveIncidentResponse), global::GatewayProtocol.ResolveIncidentResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.TopologyRequest), global::GatewayProtocol.TopologyRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.TopologyResponse), global::GatewayProtocol.TopologyResponse.Parser, new[]{ "Brokers", "ClusterSize", "PartitionsCount", "ReplicationFactor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.BrokerInfo), global::GatewayProtocol.BrokerInfo.Parser, new[]{ "NodeId", "Host", "Port", "Partitions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.Partition), global::GatewayProtocol.Partition.Parser, new[]{ "PartitionId", "Role" }, null, new[]{ typeof(global::GatewayProtocol.Partition.Types.PartitionBrokerRole) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.UpdateJobRetriesRequest), global::GatewayProtocol.UpdateJobRetriesRequest.Parser, new[]{ "JobKey", "Retries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.UpdateJobRetriesResponse), global::GatewayProtocol.UpdateJobRetriesResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.SetVariablesRequest), global::GatewayProtocol.SetVariablesRequest.Parser, new[]{ "ElementInstanceKey", "Variables", "Local" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GatewayProtocol.SetVariablesResponse), global::GatewayProtocol.SetVariablesResponse.Parser, new[]{ "Key" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ActivateJobsRequest : pb::IMessage<ActivateJobsRequest> {
    private static readonly pb::MessageParser<ActivateJobsRequest> _parser = new pb::MessageParser<ActivateJobsRequest>(() => new ActivateJobsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivateJobsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateJobsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateJobsRequest(ActivateJobsRequest other) : this() {
      type_ = other.type_;
      worker_ = other.worker_;
      timeout_ = other.timeout_;
      maxJobsToActivate_ = other.maxJobsToActivate_;
      fetchVariable_ = other.fetchVariable_.Clone();
      requestTimeout_ = other.requestTimeout_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateJobsRequest Clone() {
      return new ActivateJobsRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// the job type, as defined in the BPMN process (e.g. &lt;zeebe:taskDefinition
    /// type="payment-service" />)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "worker" field.</summary>
    public const int WorkerFieldNumber = 2;
    private string worker_ = "";
    /// <summary>
    /// the name of the worker activating the jobs, mostly used for logging purposes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Worker {
      get { return worker_; }
      set {
        worker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 3;
    private long timeout_;
    /// <summary>
    /// a job returned after this call will not be activated by another call until the
    /// timeout has been reached
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "maxJobsToActivate" field.</summary>
    public const int MaxJobsToActivateFieldNumber = 4;
    private int maxJobsToActivate_;
    /// <summary>
    /// the maximum jobs to activate by this request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxJobsToActivate {
      get { return maxJobsToActivate_; }
      set {
        maxJobsToActivate_ = value;
      }
    }

    /// <summary>Field number for the "fetchVariable" field.</summary>
    public const int FetchVariableFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_fetchVariable_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> fetchVariable_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// a list of variables to fetch as the job variables; if empty, all visible variables at
    /// the time of activation for the scope of the job will be returned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FetchVariable {
      get { return fetchVariable_; }
    }

    /// <summary>Field number for the "requestTimeout" field.</summary>
    public const int RequestTimeoutFieldNumber = 6;
    private long requestTimeout_;
    /// <summary>
    /// The request will be completed when at least one job is activated or after the requestTimeout.
    /// if the requestTimeout = 0, a default timeout is used.
    /// if the requestTimeout &lt; 0, long polling is disabled and the request is completed immediately, even when no job is activated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestTimeout {
      get { return requestTimeout_; }
      set {
        requestTimeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivateJobsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivateJobsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Worker != other.Worker) return false;
      if (Timeout != other.Timeout) return false;
      if (MaxJobsToActivate != other.MaxJobsToActivate) return false;
      if(!fetchVariable_.Equals(other.fetchVariable_)) return false;
      if (RequestTimeout != other.RequestTimeout) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Worker.Length != 0) hash ^= Worker.GetHashCode();
      if (Timeout != 0L) hash ^= Timeout.GetHashCode();
      if (MaxJobsToActivate != 0) hash ^= MaxJobsToActivate.GetHashCode();
      hash ^= fetchVariable_.GetHashCode();
      if (RequestTimeout != 0L) hash ^= RequestTimeout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Worker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Worker);
      }
      if (Timeout != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timeout);
      }
      if (MaxJobsToActivate != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxJobsToActivate);
      }
      fetchVariable_.WriteTo(output, _repeated_fetchVariable_codec);
      if (RequestTimeout != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(RequestTimeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Worker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Worker);
      }
      if (Timeout != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timeout);
      }
      if (MaxJobsToActivate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxJobsToActivate);
      }
      size += fetchVariable_.CalculateSize(_repeated_fetchVariable_codec);
      if (RequestTimeout != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequestTimeout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivateJobsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Worker.Length != 0) {
        Worker = other.Worker;
      }
      if (other.Timeout != 0L) {
        Timeout = other.Timeout;
      }
      if (other.MaxJobsToActivate != 0) {
        MaxJobsToActivate = other.MaxJobsToActivate;
      }
      fetchVariable_.Add(other.fetchVariable_);
      if (other.RequestTimeout != 0L) {
        RequestTimeout = other.RequestTimeout;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Worker = input.ReadString();
            break;
          }
          case 24: {
            Timeout = input.ReadInt64();
            break;
          }
          case 32: {
            MaxJobsToActivate = input.ReadInt32();
            break;
          }
          case 42: {
            fetchVariable_.AddEntriesFrom(input, _repeated_fetchVariable_codec);
            break;
          }
          case 48: {
            RequestTimeout = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActivateJobsResponse : pb::IMessage<ActivateJobsResponse> {
    private static readonly pb::MessageParser<ActivateJobsResponse> _parser = new pb::MessageParser<ActivateJobsResponse>(() => new ActivateJobsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivateJobsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateJobsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateJobsResponse(ActivateJobsResponse other) : this() {
      jobs_ = other.jobs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivateJobsResponse Clone() {
      return new ActivateJobsResponse(this);
    }

    /// <summary>Field number for the "jobs" field.</summary>
    public const int JobsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GatewayProtocol.ActivatedJob> _repeated_jobs_codec
        = pb::FieldCodec.ForMessage(10, global::GatewayProtocol.ActivatedJob.Parser);
    private readonly pbc::RepeatedField<global::GatewayProtocol.ActivatedJob> jobs_ = new pbc::RepeatedField<global::GatewayProtocol.ActivatedJob>();
    /// <summary>
    /// list of activated jobs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GatewayProtocol.ActivatedJob> Jobs {
      get { return jobs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivateJobsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivateJobsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!jobs_.Equals(other.jobs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= jobs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      jobs_.WriteTo(output, _repeated_jobs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += jobs_.CalculateSize(_repeated_jobs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivateJobsResponse other) {
      if (other == null) {
        return;
      }
      jobs_.Add(other.jobs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            jobs_.AddEntriesFrom(input, _repeated_jobs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActivatedJob : pb::IMessage<ActivatedJob> {
    private static readonly pb::MessageParser<ActivatedJob> _parser = new pb::MessageParser<ActivatedJob>(() => new ActivatedJob());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivatedJob> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivatedJob() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivatedJob(ActivatedJob other) : this() {
      key_ = other.key_;
      type_ = other.type_;
      workflowInstanceKey_ = other.workflowInstanceKey_;
      bpmnProcessId_ = other.bpmnProcessId_;
      workflowDefinitionVersion_ = other.workflowDefinitionVersion_;
      workflowKey_ = other.workflowKey_;
      elementId_ = other.elementId_;
      elementInstanceKey_ = other.elementInstanceKey_;
      customHeaders_ = other.customHeaders_;
      worker_ = other.worker_;
      retries_ = other.retries_;
      deadline_ = other.deadline_;
      variables_ = other.variables_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActivatedJob Clone() {
      return new ActivatedJob(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private long key_;
    /// <summary>
    /// the key, a unique identifier for the job
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// the type of the job (should match what was requested)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "workflowInstanceKey" field.</summary>
    public const int WorkflowInstanceKeyFieldNumber = 3;
    private long workflowInstanceKey_;
    /// <summary>
    /// the job's workflow instance key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowInstanceKey {
      get { return workflowInstanceKey_; }
      set {
        workflowInstanceKey_ = value;
      }
    }

    /// <summary>Field number for the "bpmnProcessId" field.</summary>
    public const int BpmnProcessIdFieldNumber = 4;
    private string bpmnProcessId_ = "";
    /// <summary>
    /// the bpmn process ID of the job workflow definition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BpmnProcessId {
      get { return bpmnProcessId_; }
      set {
        bpmnProcessId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "workflowDefinitionVersion" field.</summary>
    public const int WorkflowDefinitionVersionFieldNumber = 5;
    private int workflowDefinitionVersion_;
    /// <summary>
    /// the version of the job workflow definition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorkflowDefinitionVersion {
      get { return workflowDefinitionVersion_; }
      set {
        workflowDefinitionVersion_ = value;
      }
    }

    /// <summary>Field number for the "workflowKey" field.</summary>
    public const int WorkflowKeyFieldNumber = 6;
    private long workflowKey_;
    /// <summary>
    /// the key of the job workflow definition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowKey {
      get { return workflowKey_; }
      set {
        workflowKey_ = value;
      }
    }

    /// <summary>Field number for the "elementId" field.</summary>
    public const int ElementIdFieldNumber = 7;
    private string elementId_ = "";
    /// <summary>
    /// the associated task element ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ElementId {
      get { return elementId_; }
      set {
        elementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "elementInstanceKey" field.</summary>
    public const int ElementInstanceKeyFieldNumber = 8;
    private long elementInstanceKey_;
    /// <summary>
    /// the unique key identifying the associated task, unique within the scope of the
    /// workflow instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ElementInstanceKey {
      get { return elementInstanceKey_; }
      set {
        elementInstanceKey_ = value;
      }
    }

    /// <summary>Field number for the "customHeaders" field.</summary>
    public const int CustomHeadersFieldNumber = 9;
    private string customHeaders_ = "";
    /// <summary>
    /// a set of custom headers defined during modelling; returned as a serialized
    /// JSON document
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomHeaders {
      get { return customHeaders_; }
      set {
        customHeaders_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "worker" field.</summary>
    public const int WorkerFieldNumber = 10;
    private string worker_ = "";
    /// <summary>
    /// the name of the worker which activated this job
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Worker {
      get { return worker_; }
      set {
        worker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "retries" field.</summary>
    public const int RetriesFieldNumber = 11;
    private int retries_;
    /// <summary>
    /// the amount of retries left to this job (should always be positive)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Retries {
      get { return retries_; }
      set {
        retries_ = value;
      }
    }

    /// <summary>Field number for the "deadline" field.</summary>
    public const int DeadlineFieldNumber = 12;
    private long deadline_;
    /// <summary>
    /// when the job can be activated again, sent as a UNIX epoch timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Deadline {
      get { return deadline_; }
      set {
        deadline_ = value;
      }
    }

    /// <summary>Field number for the "variables" field.</summary>
    public const int VariablesFieldNumber = 13;
    private string variables_ = "";
    /// <summary>
    /// JSON document, computed at activation time, consisting of all visible variables to
    /// the task scope
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Variables {
      get { return variables_; }
      set {
        variables_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActivatedJob);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActivatedJob other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Type != other.Type) return false;
      if (WorkflowInstanceKey != other.WorkflowInstanceKey) return false;
      if (BpmnProcessId != other.BpmnProcessId) return false;
      if (WorkflowDefinitionVersion != other.WorkflowDefinitionVersion) return false;
      if (WorkflowKey != other.WorkflowKey) return false;
      if (ElementId != other.ElementId) return false;
      if (ElementInstanceKey != other.ElementInstanceKey) return false;
      if (CustomHeaders != other.CustomHeaders) return false;
      if (Worker != other.Worker) return false;
      if (Retries != other.Retries) return false;
      if (Deadline != other.Deadline) return false;
      if (Variables != other.Variables) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (WorkflowInstanceKey != 0L) hash ^= WorkflowInstanceKey.GetHashCode();
      if (BpmnProcessId.Length != 0) hash ^= BpmnProcessId.GetHashCode();
      if (WorkflowDefinitionVersion != 0) hash ^= WorkflowDefinitionVersion.GetHashCode();
      if (WorkflowKey != 0L) hash ^= WorkflowKey.GetHashCode();
      if (ElementId.Length != 0) hash ^= ElementId.GetHashCode();
      if (ElementInstanceKey != 0L) hash ^= ElementInstanceKey.GetHashCode();
      if (CustomHeaders.Length != 0) hash ^= CustomHeaders.GetHashCode();
      if (Worker.Length != 0) hash ^= Worker.GetHashCode();
      if (Retries != 0) hash ^= Retries.GetHashCode();
      if (Deadline != 0L) hash ^= Deadline.GetHashCode();
      if (Variables.Length != 0) hash ^= Variables.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (WorkflowInstanceKey != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WorkflowInstanceKey);
      }
      if (BpmnProcessId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BpmnProcessId);
      }
      if (WorkflowDefinitionVersion != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WorkflowDefinitionVersion);
      }
      if (WorkflowKey != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(WorkflowKey);
      }
      if (ElementId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ElementId);
      }
      if (ElementInstanceKey != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ElementInstanceKey);
      }
      if (CustomHeaders.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CustomHeaders);
      }
      if (Worker.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Worker);
      }
      if (Retries != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Retries);
      }
      if (Deadline != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(Deadline);
      }
      if (Variables.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Variables);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (WorkflowInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowInstanceKey);
      }
      if (BpmnProcessId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BpmnProcessId);
      }
      if (WorkflowDefinitionVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorkflowDefinitionVersion);
      }
      if (WorkflowKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowKey);
      }
      if (ElementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementId);
      }
      if (ElementInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ElementInstanceKey);
      }
      if (CustomHeaders.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomHeaders);
      }
      if (Worker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Worker);
      }
      if (Retries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Retries);
      }
      if (Deadline != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Deadline);
      }
      if (Variables.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Variables);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActivatedJob other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.WorkflowInstanceKey != 0L) {
        WorkflowInstanceKey = other.WorkflowInstanceKey;
      }
      if (other.BpmnProcessId.Length != 0) {
        BpmnProcessId = other.BpmnProcessId;
      }
      if (other.WorkflowDefinitionVersion != 0) {
        WorkflowDefinitionVersion = other.WorkflowDefinitionVersion;
      }
      if (other.WorkflowKey != 0L) {
        WorkflowKey = other.WorkflowKey;
      }
      if (other.ElementId.Length != 0) {
        ElementId = other.ElementId;
      }
      if (other.ElementInstanceKey != 0L) {
        ElementInstanceKey = other.ElementInstanceKey;
      }
      if (other.CustomHeaders.Length != 0) {
        CustomHeaders = other.CustomHeaders;
      }
      if (other.Worker.Length != 0) {
        Worker = other.Worker;
      }
      if (other.Retries != 0) {
        Retries = other.Retries;
      }
      if (other.Deadline != 0L) {
        Deadline = other.Deadline;
      }
      if (other.Variables.Length != 0) {
        Variables = other.Variables;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            WorkflowInstanceKey = input.ReadInt64();
            break;
          }
          case 34: {
            BpmnProcessId = input.ReadString();
            break;
          }
          case 40: {
            WorkflowDefinitionVersion = input.ReadInt32();
            break;
          }
          case 48: {
            WorkflowKey = input.ReadInt64();
            break;
          }
          case 58: {
            ElementId = input.ReadString();
            break;
          }
          case 64: {
            ElementInstanceKey = input.ReadInt64();
            break;
          }
          case 74: {
            CustomHeaders = input.ReadString();
            break;
          }
          case 82: {
            Worker = input.ReadString();
            break;
          }
          case 88: {
            Retries = input.ReadInt32();
            break;
          }
          case 96: {
            Deadline = input.ReadInt64();
            break;
          }
          case 106: {
            Variables = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelWorkflowInstanceRequest : pb::IMessage<CancelWorkflowInstanceRequest> {
    private static readonly pb::MessageParser<CancelWorkflowInstanceRequest> _parser = new pb::MessageParser<CancelWorkflowInstanceRequest>(() => new CancelWorkflowInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelWorkflowInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelWorkflowInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelWorkflowInstanceRequest(CancelWorkflowInstanceRequest other) : this() {
      workflowInstanceKey_ = other.workflowInstanceKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelWorkflowInstanceRequest Clone() {
      return new CancelWorkflowInstanceRequest(this);
    }

    /// <summary>Field number for the "workflowInstanceKey" field.</summary>
    public const int WorkflowInstanceKeyFieldNumber = 1;
    private long workflowInstanceKey_;
    /// <summary>
    /// the workflow instance key (as, for example, obtained from
    /// CreateWorkflowInstanceResponse)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowInstanceKey {
      get { return workflowInstanceKey_; }
      set {
        workflowInstanceKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelWorkflowInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelWorkflowInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkflowInstanceKey != other.WorkflowInstanceKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkflowInstanceKey != 0L) hash ^= WorkflowInstanceKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkflowInstanceKey != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(WorkflowInstanceKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkflowInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowInstanceKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelWorkflowInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.WorkflowInstanceKey != 0L) {
        WorkflowInstanceKey = other.WorkflowInstanceKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WorkflowInstanceKey = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelWorkflowInstanceResponse : pb::IMessage<CancelWorkflowInstanceResponse> {
    private static readonly pb::MessageParser<CancelWorkflowInstanceResponse> _parser = new pb::MessageParser<CancelWorkflowInstanceResponse>(() => new CancelWorkflowInstanceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelWorkflowInstanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelWorkflowInstanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelWorkflowInstanceResponse(CancelWorkflowInstanceResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelWorkflowInstanceResponse Clone() {
      return new CancelWorkflowInstanceResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelWorkflowInstanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelWorkflowInstanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelWorkflowInstanceResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CompleteJobRequest : pb::IMessage<CompleteJobRequest> {
    private static readonly pb::MessageParser<CompleteJobRequest> _parser = new pb::MessageParser<CompleteJobRequest>(() => new CompleteJobRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompleteJobRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteJobRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteJobRequest(CompleteJobRequest other) : this() {
      jobKey_ = other.jobKey_;
      variables_ = other.variables_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteJobRequest Clone() {
      return new CompleteJobRequest(this);
    }

    /// <summary>Field number for the "jobKey" field.</summary>
    public const int JobKeyFieldNumber = 1;
    private long jobKey_;
    /// <summary>
    /// the unique job identifier, as obtained from ActivateJobsResponse
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JobKey {
      get { return jobKey_; }
      set {
        jobKey_ = value;
      }
    }

    /// <summary>Field number for the "variables" field.</summary>
    public const int VariablesFieldNumber = 2;
    private string variables_ = "";
    /// <summary>
    /// a JSON document representing the variables in the current task scope
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Variables {
      get { return variables_; }
      set {
        variables_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompleteJobRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompleteJobRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JobKey != other.JobKey) return false;
      if (Variables != other.Variables) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JobKey != 0L) hash ^= JobKey.GetHashCode();
      if (Variables.Length != 0) hash ^= Variables.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JobKey != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(JobKey);
      }
      if (Variables.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Variables);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JobKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JobKey);
      }
      if (Variables.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Variables);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompleteJobRequest other) {
      if (other == null) {
        return;
      }
      if (other.JobKey != 0L) {
        JobKey = other.JobKey;
      }
      if (other.Variables.Length != 0) {
        Variables = other.Variables;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            JobKey = input.ReadInt64();
            break;
          }
          case 18: {
            Variables = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompleteJobResponse : pb::IMessage<CompleteJobResponse> {
    private static readonly pb::MessageParser<CompleteJobResponse> _parser = new pb::MessageParser<CompleteJobResponse>(() => new CompleteJobResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompleteJobResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteJobResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteJobResponse(CompleteJobResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteJobResponse Clone() {
      return new CompleteJobResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompleteJobResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompleteJobResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompleteJobResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CreateWorkflowInstanceRequest : pb::IMessage<CreateWorkflowInstanceRequest> {
    private static readonly pb::MessageParser<CreateWorkflowInstanceRequest> _parser = new pb::MessageParser<CreateWorkflowInstanceRequest>(() => new CreateWorkflowInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateWorkflowInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkflowInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkflowInstanceRequest(CreateWorkflowInstanceRequest other) : this() {
      workflowKey_ = other.workflowKey_;
      bpmnProcessId_ = other.bpmnProcessId_;
      version_ = other.version_;
      variables_ = other.variables_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkflowInstanceRequest Clone() {
      return new CreateWorkflowInstanceRequest(this);
    }

    /// <summary>Field number for the "workflowKey" field.</summary>
    public const int WorkflowKeyFieldNumber = 1;
    private long workflowKey_;
    /// <summary>
    /// the unique key identifying the workflow definition (e.g. returned from a workflow
    /// in the DeployWorkflowResponse message)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowKey {
      get { return workflowKey_; }
      set {
        workflowKey_ = value;
      }
    }

    /// <summary>Field number for the "bpmnProcessId" field.</summary>
    public const int BpmnProcessIdFieldNumber = 2;
    private string bpmnProcessId_ = "";
    /// <summary>
    /// the BPMN process ID of the workflow definition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BpmnProcessId {
      get { return bpmnProcessId_; }
      set {
        bpmnProcessId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private int version_;
    /// <summary>
    /// the version of the process; set to -1 to use the latest version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "variables" field.</summary>
    public const int VariablesFieldNumber = 4;
    private string variables_ = "";
    /// <summary>
    /// JSON document that will instantiate the variables for the root variable scope of the
    /// workflow instance; it must be a JSON object, as variables will be mapped in a
    /// key-value fashion. e.g. { "a": 1, "b": 2 } will create two variables, named "a" and
    /// "b" respectively, with their associated values. [{ "a": 1, "b": 2 }] would not be a
    /// valid argument, as the root of the JSON document is an array and not an object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Variables {
      get { return variables_; }
      set {
        variables_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateWorkflowInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateWorkflowInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkflowKey != other.WorkflowKey) return false;
      if (BpmnProcessId != other.BpmnProcessId) return false;
      if (Version != other.Version) return false;
      if (Variables != other.Variables) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkflowKey != 0L) hash ^= WorkflowKey.GetHashCode();
      if (BpmnProcessId.Length != 0) hash ^= BpmnProcessId.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Variables.Length != 0) hash ^= Variables.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkflowKey != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(WorkflowKey);
      }
      if (BpmnProcessId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BpmnProcessId);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Version);
      }
      if (Variables.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Variables);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkflowKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowKey);
      }
      if (BpmnProcessId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BpmnProcessId);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Variables.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Variables);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateWorkflowInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.WorkflowKey != 0L) {
        WorkflowKey = other.WorkflowKey;
      }
      if (other.BpmnProcessId.Length != 0) {
        BpmnProcessId = other.BpmnProcessId;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Variables.Length != 0) {
        Variables = other.Variables;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WorkflowKey = input.ReadInt64();
            break;
          }
          case 18: {
            BpmnProcessId = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadInt32();
            break;
          }
          case 34: {
            Variables = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateWorkflowInstanceResponse : pb::IMessage<CreateWorkflowInstanceResponse> {
    private static readonly pb::MessageParser<CreateWorkflowInstanceResponse> _parser = new pb::MessageParser<CreateWorkflowInstanceResponse>(() => new CreateWorkflowInstanceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateWorkflowInstanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkflowInstanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkflowInstanceResponse(CreateWorkflowInstanceResponse other) : this() {
      workflowKey_ = other.workflowKey_;
      bpmnProcessId_ = other.bpmnProcessId_;
      version_ = other.version_;
      workflowInstanceKey_ = other.workflowInstanceKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkflowInstanceResponse Clone() {
      return new CreateWorkflowInstanceResponse(this);
    }

    /// <summary>Field number for the "workflowKey" field.</summary>
    public const int WorkflowKeyFieldNumber = 1;
    private long workflowKey_;
    /// <summary>
    /// the key of the workflow definition which was used to create the workflow instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowKey {
      get { return workflowKey_; }
      set {
        workflowKey_ = value;
      }
    }

    /// <summary>Field number for the "bpmnProcessId" field.</summary>
    public const int BpmnProcessIdFieldNumber = 2;
    private string bpmnProcessId_ = "";
    /// <summary>
    /// the BPMN process ID of the workflow definition which was used to create the workflow
    /// instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BpmnProcessId {
      get { return bpmnProcessId_; }
      set {
        bpmnProcessId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private int version_;
    /// <summary>
    /// the version of the workflow definition which was used to create the workflow instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "workflowInstanceKey" field.</summary>
    public const int WorkflowInstanceKeyFieldNumber = 4;
    private long workflowInstanceKey_;
    /// <summary>
    /// the unique identifier of the created workflow instance; to be used wherever a request
    /// needs a workflow instance key (e.g. CancelWorkflowInstanceRequest)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowInstanceKey {
      get { return workflowInstanceKey_; }
      set {
        workflowInstanceKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateWorkflowInstanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateWorkflowInstanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkflowKey != other.WorkflowKey) return false;
      if (BpmnProcessId != other.BpmnProcessId) return false;
      if (Version != other.Version) return false;
      if (WorkflowInstanceKey != other.WorkflowInstanceKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkflowKey != 0L) hash ^= WorkflowKey.GetHashCode();
      if (BpmnProcessId.Length != 0) hash ^= BpmnProcessId.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (WorkflowInstanceKey != 0L) hash ^= WorkflowInstanceKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkflowKey != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(WorkflowKey);
      }
      if (BpmnProcessId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BpmnProcessId);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Version);
      }
      if (WorkflowInstanceKey != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(WorkflowInstanceKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkflowKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowKey);
      }
      if (BpmnProcessId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BpmnProcessId);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (WorkflowInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowInstanceKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateWorkflowInstanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.WorkflowKey != 0L) {
        WorkflowKey = other.WorkflowKey;
      }
      if (other.BpmnProcessId.Length != 0) {
        BpmnProcessId = other.BpmnProcessId;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.WorkflowInstanceKey != 0L) {
        WorkflowInstanceKey = other.WorkflowInstanceKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WorkflowKey = input.ReadInt64();
            break;
          }
          case 18: {
            BpmnProcessId = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadInt32();
            break;
          }
          case 32: {
            WorkflowInstanceKey = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateWorkflowInstanceWithResultRequest : pb::IMessage<CreateWorkflowInstanceWithResultRequest> {
    private static readonly pb::MessageParser<CreateWorkflowInstanceWithResultRequest> _parser = new pb::MessageParser<CreateWorkflowInstanceWithResultRequest>(() => new CreateWorkflowInstanceWithResultRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateWorkflowInstanceWithResultRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkflowInstanceWithResultRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkflowInstanceWithResultRequest(CreateWorkflowInstanceWithResultRequest other) : this() {
      request_ = other.request_ != null ? other.request_.Clone() : null;
      requestTimeout_ = other.requestTimeout_;
      fetchVariables_ = other.fetchVariables_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkflowInstanceWithResultRequest Clone() {
      return new CreateWorkflowInstanceWithResultRequest(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::GatewayProtocol.CreateWorkflowInstanceRequest request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GatewayProtocol.CreateWorkflowInstanceRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "requestTimeout" field.</summary>
    public const int RequestTimeoutFieldNumber = 2;
    private long requestTimeout_;
    /// <summary>
    /// timeout in milliseconds. the request will be closed if the workflow is not completed
    /// before the requestTimeout.
    /// if requestTimeout = 0, uses the generic requestTimeout configured in the gateway.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequestTimeout {
      get { return requestTimeout_; }
      set {
        requestTimeout_ = value;
      }
    }

    /// <summary>Field number for the "fetchVariables" field.</summary>
    public const int FetchVariablesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_fetchVariables_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> fetchVariables_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// list of names of variables to be included in `CreateWorkflowInstanceWithResultResponse.variables`
    /// if empty, all visible variables in the root scope will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FetchVariables {
      get { return fetchVariables_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateWorkflowInstanceWithResultRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateWorkflowInstanceWithResultRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      if (RequestTimeout != other.RequestTimeout) return false;
      if(!fetchVariables_.Equals(other.fetchVariables_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      if (RequestTimeout != 0L) hash ^= RequestTimeout.GetHashCode();
      hash ^= fetchVariables_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
      if (RequestTimeout != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RequestTimeout);
      }
      fetchVariables_.WriteTo(output, _repeated_fetchVariables_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (RequestTimeout != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequestTimeout);
      }
      size += fetchVariables_.CalculateSize(_repeated_fetchVariables_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateWorkflowInstanceWithResultRequest other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          Request = new global::GatewayProtocol.CreateWorkflowInstanceRequest();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.RequestTimeout != 0L) {
        RequestTimeout = other.RequestTimeout;
      }
      fetchVariables_.Add(other.fetchVariables_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (request_ == null) {
              Request = new global::GatewayProtocol.CreateWorkflowInstanceRequest();
            }
            input.ReadMessage(Request);
            break;
          }
          case 16: {
            RequestTimeout = input.ReadInt64();
            break;
          }
          case 26: {
            fetchVariables_.AddEntriesFrom(input, _repeated_fetchVariables_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateWorkflowInstanceWithResultResponse : pb::IMessage<CreateWorkflowInstanceWithResultResponse> {
    private static readonly pb::MessageParser<CreateWorkflowInstanceWithResultResponse> _parser = new pb::MessageParser<CreateWorkflowInstanceWithResultResponse>(() => new CreateWorkflowInstanceWithResultResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateWorkflowInstanceWithResultResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkflowInstanceWithResultResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkflowInstanceWithResultResponse(CreateWorkflowInstanceWithResultResponse other) : this() {
      workflowKey_ = other.workflowKey_;
      bpmnProcessId_ = other.bpmnProcessId_;
      version_ = other.version_;
      workflowInstanceKey_ = other.workflowInstanceKey_;
      variables_ = other.variables_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkflowInstanceWithResultResponse Clone() {
      return new CreateWorkflowInstanceWithResultResponse(this);
    }

    /// <summary>Field number for the "workflowKey" field.</summary>
    public const int WorkflowKeyFieldNumber = 1;
    private long workflowKey_;
    /// <summary>
    /// the key of the workflow definition which was used to create the workflow instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowKey {
      get { return workflowKey_; }
      set {
        workflowKey_ = value;
      }
    }

    /// <summary>Field number for the "bpmnProcessId" field.</summary>
    public const int BpmnProcessIdFieldNumber = 2;
    private string bpmnProcessId_ = "";
    /// <summary>
    /// the BPMN process ID of the workflow definition which was used to create the workflow
    /// instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BpmnProcessId {
      get { return bpmnProcessId_; }
      set {
        bpmnProcessId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private int version_;
    /// <summary>
    /// the version of the workflow definition which was used to create the workflow instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "workflowInstanceKey" field.</summary>
    public const int WorkflowInstanceKeyFieldNumber = 4;
    private long workflowInstanceKey_;
    /// <summary>
    /// the unique identifier of the created workflow instance; to be used wherever a request
    /// needs a workflow instance key (e.g. CancelWorkflowInstanceRequest)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowInstanceKey {
      get { return workflowInstanceKey_; }
      set {
        workflowInstanceKey_ = value;
      }
    }

    /// <summary>Field number for the "variables" field.</summary>
    public const int VariablesFieldNumber = 5;
    private string variables_ = "";
    /// <summary>
    /// JSON document
    /// consists of visible variables in the root scope
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Variables {
      get { return variables_; }
      set {
        variables_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateWorkflowInstanceWithResultResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateWorkflowInstanceWithResultResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkflowKey != other.WorkflowKey) return false;
      if (BpmnProcessId != other.BpmnProcessId) return false;
      if (Version != other.Version) return false;
      if (WorkflowInstanceKey != other.WorkflowInstanceKey) return false;
      if (Variables != other.Variables) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkflowKey != 0L) hash ^= WorkflowKey.GetHashCode();
      if (BpmnProcessId.Length != 0) hash ^= BpmnProcessId.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (WorkflowInstanceKey != 0L) hash ^= WorkflowInstanceKey.GetHashCode();
      if (Variables.Length != 0) hash ^= Variables.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkflowKey != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(WorkflowKey);
      }
      if (BpmnProcessId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BpmnProcessId);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Version);
      }
      if (WorkflowInstanceKey != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(WorkflowInstanceKey);
      }
      if (Variables.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Variables);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkflowKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowKey);
      }
      if (BpmnProcessId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BpmnProcessId);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (WorkflowInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowInstanceKey);
      }
      if (Variables.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Variables);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateWorkflowInstanceWithResultResponse other) {
      if (other == null) {
        return;
      }
      if (other.WorkflowKey != 0L) {
        WorkflowKey = other.WorkflowKey;
      }
      if (other.BpmnProcessId.Length != 0) {
        BpmnProcessId = other.BpmnProcessId;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.WorkflowInstanceKey != 0L) {
        WorkflowInstanceKey = other.WorkflowInstanceKey;
      }
      if (other.Variables.Length != 0) {
        Variables = other.Variables;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WorkflowKey = input.ReadInt64();
            break;
          }
          case 18: {
            BpmnProcessId = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadInt32();
            break;
          }
          case 32: {
            WorkflowInstanceKey = input.ReadInt64();
            break;
          }
          case 42: {
            Variables = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeployWorkflowRequest : pb::IMessage<DeployWorkflowRequest> {
    private static readonly pb::MessageParser<DeployWorkflowRequest> _parser = new pb::MessageParser<DeployWorkflowRequest>(() => new DeployWorkflowRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeployWorkflowRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployWorkflowRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployWorkflowRequest(DeployWorkflowRequest other) : this() {
      workflows_ = other.workflows_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployWorkflowRequest Clone() {
      return new DeployWorkflowRequest(this);
    }

    /// <summary>Field number for the "workflows" field.</summary>
    public const int WorkflowsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GatewayProtocol.WorkflowRequestObject> _repeated_workflows_codec
        = pb::FieldCodec.ForMessage(10, global::GatewayProtocol.WorkflowRequestObject.Parser);
    private readonly pbc::RepeatedField<global::GatewayProtocol.WorkflowRequestObject> workflows_ = new pbc::RepeatedField<global::GatewayProtocol.WorkflowRequestObject>();
    /// <summary>
    /// List of workflow resources to deploy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GatewayProtocol.WorkflowRequestObject> Workflows {
      get { return workflows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeployWorkflowRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeployWorkflowRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!workflows_.Equals(other.workflows_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= workflows_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      workflows_.WriteTo(output, _repeated_workflows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += workflows_.CalculateSize(_repeated_workflows_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeployWorkflowRequest other) {
      if (other == null) {
        return;
      }
      workflows_.Add(other.workflows_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            workflows_.AddEntriesFrom(input, _repeated_workflows_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkflowRequestObject : pb::IMessage<WorkflowRequestObject> {
    private static readonly pb::MessageParser<WorkflowRequestObject> _parser = new pb::MessageParser<WorkflowRequestObject>(() => new WorkflowRequestObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkflowRequestObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowRequestObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowRequestObject(WorkflowRequestObject other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      definition_ = other.definition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowRequestObject Clone() {
      return new WorkflowRequestObject(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// the resource basename, e.g. myProcess.bpmn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::GatewayProtocol.WorkflowRequestObject.Types.ResourceType type_ = 0;
    /// <summary>
    /// the resource type; if set to BPMN or YAML then the file extension
    /// is ignored
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GatewayProtocol.WorkflowRequestObject.Types.ResourceType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "definition" field.</summary>
    public const int DefinitionFieldNumber = 3;
    private pb::ByteString definition_ = pb::ByteString.Empty;
    /// <summary>
    /// the process definition as a UTF8-encoded string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Definition {
      get { return definition_; }
      set {
        definition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkflowRequestObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkflowRequestObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Definition != other.Definition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Definition.Length != 0) hash ^= Definition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Definition.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Definition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Definition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Definition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkflowRequestObject other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Definition.Length != 0) {
        Definition = other.Definition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::GatewayProtocol.WorkflowRequestObject.Types.ResourceType) input.ReadEnum();
            break;
          }
          case 26: {
            Definition = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WorkflowRequestObject message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ResourceType {
        /// <summary>
        /// FILE type means the gateway will try to detect the resource type
        /// using the file extension of the name field
        /// </summary>
        [pbr::OriginalName("FILE")] File = 0,
        /// <summary>
        /// extension 'bpmn'
        /// </summary>
        [pbr::OriginalName("BPMN")] Bpmn = 1,
        /// <summary>
        /// extension 'yaml'
        /// </summary>
        [pbr::OriginalName("YAML")] Yaml = 2,
      }

    }
    #endregion

  }

  public sealed partial class DeployWorkflowResponse : pb::IMessage<DeployWorkflowResponse> {
    private static readonly pb::MessageParser<DeployWorkflowResponse> _parser = new pb::MessageParser<DeployWorkflowResponse>(() => new DeployWorkflowResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeployWorkflowResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployWorkflowResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployWorkflowResponse(DeployWorkflowResponse other) : this() {
      key_ = other.key_;
      workflows_ = other.workflows_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployWorkflowResponse Clone() {
      return new DeployWorkflowResponse(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private long key_;
    /// <summary>
    /// the unique key identifying the deployment
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "workflows" field.</summary>
    public const int WorkflowsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GatewayProtocol.WorkflowMetadata> _repeated_workflows_codec
        = pb::FieldCodec.ForMessage(18, global::GatewayProtocol.WorkflowMetadata.Parser);
    private readonly pbc::RepeatedField<global::GatewayProtocol.WorkflowMetadata> workflows_ = new pbc::RepeatedField<global::GatewayProtocol.WorkflowMetadata>();
    /// <summary>
    /// a list of deployed workflows
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GatewayProtocol.WorkflowMetadata> Workflows {
      get { return workflows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeployWorkflowResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeployWorkflowResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if(!workflows_.Equals(other.workflows_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0L) hash ^= Key.GetHashCode();
      hash ^= workflows_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      workflows_.WriteTo(output, _repeated_workflows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      size += workflows_.CalculateSize(_repeated_workflows_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeployWorkflowResponse other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      workflows_.Add(other.workflows_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 18: {
            workflows_.AddEntriesFrom(input, _repeated_workflows_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkflowMetadata : pb::IMessage<WorkflowMetadata> {
    private static readonly pb::MessageParser<WorkflowMetadata> _parser = new pb::MessageParser<WorkflowMetadata>(() => new WorkflowMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkflowMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowMetadata(WorkflowMetadata other) : this() {
      bpmnProcessId_ = other.bpmnProcessId_;
      version_ = other.version_;
      workflowKey_ = other.workflowKey_;
      resourceName_ = other.resourceName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowMetadata Clone() {
      return new WorkflowMetadata(this);
    }

    /// <summary>Field number for the "bpmnProcessId" field.</summary>
    public const int BpmnProcessIdFieldNumber = 1;
    private string bpmnProcessId_ = "";
    /// <summary>
    /// the bpmn process ID, as parsed during deployment; together with the version forms a
    /// unique identifier for a specific workflow definition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BpmnProcessId {
      get { return bpmnProcessId_; }
      set {
        bpmnProcessId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private int version_;
    /// <summary>
    /// the assigned process version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "workflowKey" field.</summary>
    public const int WorkflowKeyFieldNumber = 3;
    private long workflowKey_;
    /// <summary>
    /// the assigned key, which acts as a unique identifier for this workflow
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowKey {
      get { return workflowKey_; }
      set {
        workflowKey_ = value;
      }
    }

    /// <summary>Field number for the "resourceName" field.</summary>
    public const int ResourceNameFieldNumber = 4;
    private string resourceName_ = "";
    /// <summary>
    /// the resource name (see: WorkflowRequestObject.name) from which this workflow was
    /// parsed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkflowMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkflowMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BpmnProcessId != other.BpmnProcessId) return false;
      if (Version != other.Version) return false;
      if (WorkflowKey != other.WorkflowKey) return false;
      if (ResourceName != other.ResourceName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BpmnProcessId.Length != 0) hash ^= BpmnProcessId.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (WorkflowKey != 0L) hash ^= WorkflowKey.GetHashCode();
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BpmnProcessId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BpmnProcessId);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Version);
      }
      if (WorkflowKey != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WorkflowKey);
      }
      if (ResourceName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ResourceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BpmnProcessId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BpmnProcessId);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (WorkflowKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowKey);
      }
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkflowMetadata other) {
      if (other == null) {
        return;
      }
      if (other.BpmnProcessId.Length != 0) {
        BpmnProcessId = other.BpmnProcessId;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.WorkflowKey != 0L) {
        WorkflowKey = other.WorkflowKey;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BpmnProcessId = input.ReadString();
            break;
          }
          case 16: {
            Version = input.ReadInt32();
            break;
          }
          case 24: {
            WorkflowKey = input.ReadInt64();
            break;
          }
          case 34: {
            ResourceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FailJobRequest : pb::IMessage<FailJobRequest> {
    private static readonly pb::MessageParser<FailJobRequest> _parser = new pb::MessageParser<FailJobRequest>(() => new FailJobRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FailJobRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FailJobRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FailJobRequest(FailJobRequest other) : this() {
      jobKey_ = other.jobKey_;
      retries_ = other.retries_;
      errorMessage_ = other.errorMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FailJobRequest Clone() {
      return new FailJobRequest(this);
    }

    /// <summary>Field number for the "jobKey" field.</summary>
    public const int JobKeyFieldNumber = 1;
    private long jobKey_;
    /// <summary>
    /// the unique job identifier, as obtained when activating the job
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JobKey {
      get { return jobKey_; }
      set {
        jobKey_ = value;
      }
    }

    /// <summary>Field number for the "retries" field.</summary>
    public const int RetriesFieldNumber = 2;
    private int retries_;
    /// <summary>
    /// the amount of retries the job should have left
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Retries {
      get { return retries_; }
      set {
        retries_ = value;
      }
    }

    /// <summary>Field number for the "errorMessage" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private string errorMessage_ = "";
    /// <summary>
    /// an optional message describing why the job failed
    /// this is particularly useful if a job runs out of retries and an incident is raised,
    /// as it this message can help explain why an incident was raised
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FailJobRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FailJobRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JobKey != other.JobKey) return false;
      if (Retries != other.Retries) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JobKey != 0L) hash ^= JobKey.GetHashCode();
      if (Retries != 0) hash ^= Retries.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JobKey != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(JobKey);
      }
      if (Retries != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Retries);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JobKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JobKey);
      }
      if (Retries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Retries);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FailJobRequest other) {
      if (other == null) {
        return;
      }
      if (other.JobKey != 0L) {
        JobKey = other.JobKey;
      }
      if (other.Retries != 0) {
        Retries = other.Retries;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            JobKey = input.ReadInt64();
            break;
          }
          case 16: {
            Retries = input.ReadInt32();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FailJobResponse : pb::IMessage<FailJobResponse> {
    private static readonly pb::MessageParser<FailJobResponse> _parser = new pb::MessageParser<FailJobResponse>(() => new FailJobResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FailJobResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FailJobResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FailJobResponse(FailJobResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FailJobResponse Clone() {
      return new FailJobResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FailJobResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FailJobResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FailJobResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ThrowErrorRequest : pb::IMessage<ThrowErrorRequest> {
    private static readonly pb::MessageParser<ThrowErrorRequest> _parser = new pb::MessageParser<ThrowErrorRequest>(() => new ThrowErrorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThrowErrorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowErrorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowErrorRequest(ThrowErrorRequest other) : this() {
      jobKey_ = other.jobKey_;
      errorCode_ = other.errorCode_;
      errorMessage_ = other.errorMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowErrorRequest Clone() {
      return new ThrowErrorRequest(this);
    }

    /// <summary>Field number for the "jobKey" field.</summary>
    public const int JobKeyFieldNumber = 1;
    private long jobKey_;
    /// <summary>
    /// the unique job identifier, as obtained when activating the job
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JobKey {
      get { return jobKey_; }
      set {
        jobKey_ = value;
      }
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private string errorCode_ = "";
    /// <summary>
    /// the error code that will be matched with an error catch event
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errorMessage" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private string errorMessage_ = "";
    /// <summary>
    /// an optional error message that provides additional context
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThrowErrorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThrowErrorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JobKey != other.JobKey) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JobKey != 0L) hash ^= JobKey.GetHashCode();
      if (ErrorCode.Length != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JobKey != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(JobKey);
      }
      if (ErrorCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorCode);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JobKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JobKey);
      }
      if (ErrorCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCode);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThrowErrorRequest other) {
      if (other == null) {
        return;
      }
      if (other.JobKey != 0L) {
        JobKey = other.JobKey;
      }
      if (other.ErrorCode.Length != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            JobKey = input.ReadInt64();
            break;
          }
          case 18: {
            ErrorCode = input.ReadString();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ThrowErrorResponse : pb::IMessage<ThrowErrorResponse> {
    private static readonly pb::MessageParser<ThrowErrorResponse> _parser = new pb::MessageParser<ThrowErrorResponse>(() => new ThrowErrorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThrowErrorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowErrorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowErrorResponse(ThrowErrorResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowErrorResponse Clone() {
      return new ThrowErrorResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThrowErrorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThrowErrorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThrowErrorResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PublishMessageRequest : pb::IMessage<PublishMessageRequest> {
    private static readonly pb::MessageParser<PublishMessageRequest> _parser = new pb::MessageParser<PublishMessageRequest>(() => new PublishMessageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublishMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishMessageRequest(PublishMessageRequest other) : this() {
      name_ = other.name_;
      correlationKey_ = other.correlationKey_;
      timeToLive_ = other.timeToLive_;
      messageId_ = other.messageId_;
      variables_ = other.variables_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishMessageRequest Clone() {
      return new PublishMessageRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// the name of the message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "correlationKey" field.</summary>
    public const int CorrelationKeyFieldNumber = 2;
    private string correlationKey_ = "";
    /// <summary>
    /// the correlation key of the message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationKey {
      get { return correlationKey_; }
      set {
        correlationKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeToLive" field.</summary>
    public const int TimeToLiveFieldNumber = 3;
    private long timeToLive_;
    /// <summary>
    /// how long the message should be buffered on the broker, in milliseconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeToLive {
      get { return timeToLive_; }
      set {
        timeToLive_ = value;
      }
    }

    /// <summary>Field number for the "messageId" field.</summary>
    public const int MessageIdFieldNumber = 4;
    private string messageId_ = "";
    /// <summary>
    /// the unique ID of the message; can be omitted. only useful to ensure only one message
    /// with the given ID will ever be published (during its lifetime)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "variables" field.</summary>
    public const int VariablesFieldNumber = 5;
    private string variables_ = "";
    /// <summary>
    /// the message variables as a JSON document; to be valid, the root of the document must be an
    /// object, e.g. { "a": "foo" }. [ "foo" ] would not be valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Variables {
      get { return variables_; }
      set {
        variables_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublishMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublishMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (CorrelationKey != other.CorrelationKey) return false;
      if (TimeToLive != other.TimeToLive) return false;
      if (MessageId != other.MessageId) return false;
      if (Variables != other.Variables) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CorrelationKey.Length != 0) hash ^= CorrelationKey.GetHashCode();
      if (TimeToLive != 0L) hash ^= TimeToLive.GetHashCode();
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (Variables.Length != 0) hash ^= Variables.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (CorrelationKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CorrelationKey);
      }
      if (TimeToLive != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TimeToLive);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MessageId);
      }
      if (Variables.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Variables);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CorrelationKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationKey);
      }
      if (TimeToLive != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeToLive);
      }
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (Variables.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Variables);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublishMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CorrelationKey.Length != 0) {
        CorrelationKey = other.CorrelationKey;
      }
      if (other.TimeToLive != 0L) {
        TimeToLive = other.TimeToLive;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.Variables.Length != 0) {
        Variables = other.Variables;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            CorrelationKey = input.ReadString();
            break;
          }
          case 24: {
            TimeToLive = input.ReadInt64();
            break;
          }
          case 34: {
            MessageId = input.ReadString();
            break;
          }
          case 42: {
            Variables = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublishMessageResponse : pb::IMessage<PublishMessageResponse> {
    private static readonly pb::MessageParser<PublishMessageResponse> _parser = new pb::MessageParser<PublishMessageResponse>(() => new PublishMessageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublishMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishMessageResponse(PublishMessageResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishMessageResponse Clone() {
      return new PublishMessageResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublishMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublishMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublishMessageResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ResolveIncidentRequest : pb::IMessage<ResolveIncidentRequest> {
    private static readonly pb::MessageParser<ResolveIncidentRequest> _parser = new pb::MessageParser<ResolveIncidentRequest>(() => new ResolveIncidentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResolveIncidentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolveIncidentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolveIncidentRequest(ResolveIncidentRequest other) : this() {
      incidentKey_ = other.incidentKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolveIncidentRequest Clone() {
      return new ResolveIncidentRequest(this);
    }

    /// <summary>Field number for the "incidentKey" field.</summary>
    public const int IncidentKeyFieldNumber = 1;
    private long incidentKey_;
    /// <summary>
    /// the unique ID of the incident to resolve
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IncidentKey {
      get { return incidentKey_; }
      set {
        incidentKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResolveIncidentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResolveIncidentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncidentKey != other.IncidentKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IncidentKey != 0L) hash ^= IncidentKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IncidentKey != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(IncidentKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncidentKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IncidentKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResolveIncidentRequest other) {
      if (other == null) {
        return;
      }
      if (other.IncidentKey != 0L) {
        IncidentKey = other.IncidentKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IncidentKey = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResolveIncidentResponse : pb::IMessage<ResolveIncidentResponse> {
    private static readonly pb::MessageParser<ResolveIncidentResponse> _parser = new pb::MessageParser<ResolveIncidentResponse>(() => new ResolveIncidentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResolveIncidentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolveIncidentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolveIncidentResponse(ResolveIncidentResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolveIncidentResponse Clone() {
      return new ResolveIncidentResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResolveIncidentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResolveIncidentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResolveIncidentResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class TopologyRequest : pb::IMessage<TopologyRequest> {
    private static readonly pb::MessageParser<TopologyRequest> _parser = new pb::MessageParser<TopologyRequest>(() => new TopologyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopologyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopologyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopologyRequest(TopologyRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopologyRequest Clone() {
      return new TopologyRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopologyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopologyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopologyRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class TopologyResponse : pb::IMessage<TopologyResponse> {
    private static readonly pb::MessageParser<TopologyResponse> _parser = new pb::MessageParser<TopologyResponse>(() => new TopologyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopologyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopologyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopologyResponse(TopologyResponse other) : this() {
      brokers_ = other.brokers_.Clone();
      clusterSize_ = other.clusterSize_;
      partitionsCount_ = other.partitionsCount_;
      replicationFactor_ = other.replicationFactor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopologyResponse Clone() {
      return new TopologyResponse(this);
    }

    /// <summary>Field number for the "brokers" field.</summary>
    public const int BrokersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GatewayProtocol.BrokerInfo> _repeated_brokers_codec
        = pb::FieldCodec.ForMessage(10, global::GatewayProtocol.BrokerInfo.Parser);
    private readonly pbc::RepeatedField<global::GatewayProtocol.BrokerInfo> brokers_ = new pbc::RepeatedField<global::GatewayProtocol.BrokerInfo>();
    /// <summary>
    /// list of brokers part of this cluster
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GatewayProtocol.BrokerInfo> Brokers {
      get { return brokers_; }
    }

    /// <summary>Field number for the "clusterSize" field.</summary>
    public const int ClusterSizeFieldNumber = 2;
    private int clusterSize_;
    /// <summary>
    /// how many nodes are in the cluster
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClusterSize {
      get { return clusterSize_; }
      set {
        clusterSize_ = value;
      }
    }

    /// <summary>Field number for the "partitionsCount" field.</summary>
    public const int PartitionsCountFieldNumber = 3;
    private int partitionsCount_;
    /// <summary>
    /// how many partitions are spread across the cluster
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PartitionsCount {
      get { return partitionsCount_; }
      set {
        partitionsCount_ = value;
      }
    }

    /// <summary>Field number for the "replicationFactor" field.</summary>
    public const int ReplicationFactorFieldNumber = 4;
    private int replicationFactor_;
    /// <summary>
    /// configured replication factor for this cluster
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReplicationFactor {
      get { return replicationFactor_; }
      set {
        replicationFactor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopologyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopologyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!brokers_.Equals(other.brokers_)) return false;
      if (ClusterSize != other.ClusterSize) return false;
      if (PartitionsCount != other.PartitionsCount) return false;
      if (ReplicationFactor != other.ReplicationFactor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= brokers_.GetHashCode();
      if (ClusterSize != 0) hash ^= ClusterSize.GetHashCode();
      if (PartitionsCount != 0) hash ^= PartitionsCount.GetHashCode();
      if (ReplicationFactor != 0) hash ^= ReplicationFactor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      brokers_.WriteTo(output, _repeated_brokers_codec);
      if (ClusterSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ClusterSize);
      }
      if (PartitionsCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PartitionsCount);
      }
      if (ReplicationFactor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ReplicationFactor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += brokers_.CalculateSize(_repeated_brokers_codec);
      if (ClusterSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClusterSize);
      }
      if (PartitionsCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartitionsCount);
      }
      if (ReplicationFactor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReplicationFactor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopologyResponse other) {
      if (other == null) {
        return;
      }
      brokers_.Add(other.brokers_);
      if (other.ClusterSize != 0) {
        ClusterSize = other.ClusterSize;
      }
      if (other.PartitionsCount != 0) {
        PartitionsCount = other.PartitionsCount;
      }
      if (other.ReplicationFactor != 0) {
        ReplicationFactor = other.ReplicationFactor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            brokers_.AddEntriesFrom(input, _repeated_brokers_codec);
            break;
          }
          case 16: {
            ClusterSize = input.ReadInt32();
            break;
          }
          case 24: {
            PartitionsCount = input.ReadInt32();
            break;
          }
          case 32: {
            ReplicationFactor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BrokerInfo : pb::IMessage<BrokerInfo> {
    private static readonly pb::MessageParser<BrokerInfo> _parser = new pb::MessageParser<BrokerInfo>(() => new BrokerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BrokerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrokerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrokerInfo(BrokerInfo other) : this() {
      nodeId_ = other.nodeId_;
      host_ = other.host_;
      port_ = other.port_;
      partitions_ = other.partitions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrokerInfo Clone() {
      return new BrokerInfo(this);
    }

    /// <summary>Field number for the "nodeId" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private int nodeId_;
    /// <summary>
    /// unique (within a cluster) node ID for the broker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 2;
    private string host_ = "";
    /// <summary>
    /// hostname of the broker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private int port_;
    /// <summary>
    /// port for the broker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "partitions" field.</summary>
    public const int PartitionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GatewayProtocol.Partition> _repeated_partitions_codec
        = pb::FieldCodec.ForMessage(34, global::GatewayProtocol.Partition.Parser);
    private readonly pbc::RepeatedField<global::GatewayProtocol.Partition> partitions_ = new pbc::RepeatedField<global::GatewayProtocol.Partition>();
    /// <summary>
    /// list of partitions managed or replicated on this broker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GatewayProtocol.Partition> Partitions {
      get { return partitions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BrokerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BrokerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if(!partitions_.Equals(other.partitions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0) hash ^= NodeId.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      hash ^= partitions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NodeId);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Port);
      }
      partitions_.WriteTo(output, _repeated_partitions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeId);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      size += partitions_.CalculateSize(_repeated_partitions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BrokerInfo other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0) {
        NodeId = other.NodeId;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      partitions_.Add(other.partitions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadInt32();
            break;
          }
          case 18: {
            Host = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadInt32();
            break;
          }
          case 34: {
            partitions_.AddEntriesFrom(input, _repeated_partitions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Partition : pb::IMessage<Partition> {
    private static readonly pb::MessageParser<Partition> _parser = new pb::MessageParser<Partition>(() => new Partition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Partition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Partition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Partition(Partition other) : this() {
      partitionId_ = other.partitionId_;
      role_ = other.role_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Partition Clone() {
      return new Partition(this);
    }

    /// <summary>Field number for the "partitionId" field.</summary>
    public const int PartitionIdFieldNumber = 1;
    private int partitionId_;
    /// <summary>
    /// the unique ID of this partition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PartitionId {
      get { return partitionId_; }
      set {
        partitionId_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 2;
    private global::GatewayProtocol.Partition.Types.PartitionBrokerRole role_ = 0;
    /// <summary>
    /// the role of the broker for this partition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GatewayProtocol.Partition.Types.PartitionBrokerRole Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Partition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Partition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartitionId != other.PartitionId) return false;
      if (Role != other.Role) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartitionId != 0) hash ^= PartitionId.GetHashCode();
      if (Role != 0) hash ^= Role.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartitionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PartitionId);
      }
      if (Role != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Role);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartitionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartitionId);
      }
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Partition other) {
      if (other == null) {
        return;
      }
      if (other.PartitionId != 0) {
        PartitionId = other.PartitionId;
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PartitionId = input.ReadInt32();
            break;
          }
          case 16: {
            Role = (global::GatewayProtocol.Partition.Types.PartitionBrokerRole) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Partition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Describes the Raft role of the broker for a given partition
      /// </summary>
      public enum PartitionBrokerRole {
        [pbr::OriginalName("LEADER")] Leader = 0,
        [pbr::OriginalName("FOLLOWER")] Follower = 1,
      }

    }
    #endregion

  }

  public sealed partial class UpdateJobRetriesRequest : pb::IMessage<UpdateJobRetriesRequest> {
    private static readonly pb::MessageParser<UpdateJobRetriesRequest> _parser = new pb::MessageParser<UpdateJobRetriesRequest>(() => new UpdateJobRetriesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateJobRetriesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateJobRetriesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateJobRetriesRequest(UpdateJobRetriesRequest other) : this() {
      jobKey_ = other.jobKey_;
      retries_ = other.retries_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateJobRetriesRequest Clone() {
      return new UpdateJobRetriesRequest(this);
    }

    /// <summary>Field number for the "jobKey" field.</summary>
    public const int JobKeyFieldNumber = 1;
    private long jobKey_;
    /// <summary>
    /// the unique job identifier, as obtained through ActivateJobs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JobKey {
      get { return jobKey_; }
      set {
        jobKey_ = value;
      }
    }

    /// <summary>Field number for the "retries" field.</summary>
    public const int RetriesFieldNumber = 2;
    private int retries_;
    /// <summary>
    /// the new amount of retries for the job; must be positive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Retries {
      get { return retries_; }
      set {
        retries_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateJobRetriesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateJobRetriesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JobKey != other.JobKey) return false;
      if (Retries != other.Retries) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JobKey != 0L) hash ^= JobKey.GetHashCode();
      if (Retries != 0) hash ^= Retries.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JobKey != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(JobKey);
      }
      if (Retries != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Retries);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JobKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JobKey);
      }
      if (Retries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Retries);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateJobRetriesRequest other) {
      if (other == null) {
        return;
      }
      if (other.JobKey != 0L) {
        JobKey = other.JobKey;
      }
      if (other.Retries != 0) {
        Retries = other.Retries;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            JobKey = input.ReadInt64();
            break;
          }
          case 16: {
            Retries = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateJobRetriesResponse : pb::IMessage<UpdateJobRetriesResponse> {
    private static readonly pb::MessageParser<UpdateJobRetriesResponse> _parser = new pb::MessageParser<UpdateJobRetriesResponse>(() => new UpdateJobRetriesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateJobRetriesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateJobRetriesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateJobRetriesResponse(UpdateJobRetriesResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateJobRetriesResponse Clone() {
      return new UpdateJobRetriesResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateJobRetriesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateJobRetriesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateJobRetriesResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class SetVariablesRequest : pb::IMessage<SetVariablesRequest> {
    private static readonly pb::MessageParser<SetVariablesRequest> _parser = new pb::MessageParser<SetVariablesRequest>(() => new SetVariablesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetVariablesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVariablesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVariablesRequest(SetVariablesRequest other) : this() {
      elementInstanceKey_ = other.elementInstanceKey_;
      variables_ = other.variables_;
      local_ = other.local_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVariablesRequest Clone() {
      return new SetVariablesRequest(this);
    }

    /// <summary>Field number for the "elementInstanceKey" field.</summary>
    public const int ElementInstanceKeyFieldNumber = 1;
    private long elementInstanceKey_;
    /// <summary>
    /// the unique identifier of a particular element; can be the workflow instance key (as
    /// obtained during instance creation), or a given element, such as a service task (see
    /// elementInstanceKey on the job message)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ElementInstanceKey {
      get { return elementInstanceKey_; }
      set {
        elementInstanceKey_ = value;
      }
    }

    /// <summary>Field number for the "variables" field.</summary>
    public const int VariablesFieldNumber = 2;
    private string variables_ = "";
    /// <summary>
    /// a JSON serialized document describing variables as key value pairs; the root of the document
    /// must be an object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Variables {
      get { return variables_; }
      set {
        variables_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 3;
    private bool local_;
    /// <summary>
    /// if true, the variables will be merged strictly into the local scope (as indicated by
    /// elementInstanceKey); this means the variables is not propagated to upper scopes.
    /// for example, let's say we have two scopes, '1' and '2', with each having effective variables as:
    /// 1 => `{ "foo" : 2 }`, and 2 => `{ "bar" : 1 }`. if we send an update request with
    /// elementInstanceKey = 2, variables `{ "foo" : 5 }`, and local is true, then scope 1 will
    /// be unchanged, and scope 2 will now be `{ "bar" : 1, "foo" 5 }`. if local was false, however,
    /// then scope 1 would be `{ "foo": 5 }`, and scope 2 would be `{ "bar" : 1 }`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Local {
      get { return local_; }
      set {
        local_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetVariablesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetVariablesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ElementInstanceKey != other.ElementInstanceKey) return false;
      if (Variables != other.Variables) return false;
      if (Local != other.Local) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ElementInstanceKey != 0L) hash ^= ElementInstanceKey.GetHashCode();
      if (Variables.Length != 0) hash ^= Variables.GetHashCode();
      if (Local != false) hash ^= Local.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ElementInstanceKey != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ElementInstanceKey);
      }
      if (Variables.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Variables);
      }
      if (Local != false) {
        output.WriteRawTag(24);
        output.WriteBool(Local);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ElementInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ElementInstanceKey);
      }
      if (Variables.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Variables);
      }
      if (Local != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetVariablesRequest other) {
      if (other == null) {
        return;
      }
      if (other.ElementInstanceKey != 0L) {
        ElementInstanceKey = other.ElementInstanceKey;
      }
      if (other.Variables.Length != 0) {
        Variables = other.Variables;
      }
      if (other.Local != false) {
        Local = other.Local;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ElementInstanceKey = input.ReadInt64();
            break;
          }
          case 18: {
            Variables = input.ReadString();
            break;
          }
          case 24: {
            Local = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetVariablesResponse : pb::IMessage<SetVariablesResponse> {
    private static readonly pb::MessageParser<SetVariablesResponse> _parser = new pb::MessageParser<SetVariablesResponse>(() => new SetVariablesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetVariablesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GatewayProtocol.GatewayReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVariablesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVariablesResponse(SetVariablesResponse other) : this() {
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetVariablesResponse Clone() {
      return new SetVariablesResponse(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private long key_;
    /// <summary>
    /// the unique key of the set variables command
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetVariablesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetVariablesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetVariablesResponse other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
